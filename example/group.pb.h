// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_group_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_group_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "public.pb.h"
#include "chatservice.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_group_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_group_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_group_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_group_2eproto_metadata_getter(int index);
namespace fixbug {
class AddGroupRequest;
struct AddGroupRequestDefaultTypeInternal;
extern AddGroupRequestDefaultTypeInternal _AddGroupRequest_default_instance_;
class AddGroupResponse;
struct AddGroupResponseDefaultTypeInternal;
extern AddGroupResponseDefaultTypeInternal _AddGroupResponse_default_instance_;
class SendMessageRequest;
struct SendMessageRequestDefaultTypeInternal;
extern SendMessageRequestDefaultTypeInternal _SendMessageRequest_default_instance_;
class SendMessageResponse;
struct SendMessageResponseDefaultTypeInternal;
extern SendMessageResponseDefaultTypeInternal _SendMessageResponse_default_instance_;
class createGroupRequest;
struct createGroupRequestDefaultTypeInternal;
extern createGroupRequestDefaultTypeInternal _createGroupRequest_default_instance_;
class createGroupResponse;
struct createGroupResponseDefaultTypeInternal;
extern createGroupResponseDefaultTypeInternal _createGroupResponse_default_instance_;
class getGroupRequest;
struct getGroupRequestDefaultTypeInternal;
extern getGroupRequestDefaultTypeInternal _getGroupRequest_default_instance_;
class getGroupResponse;
struct getGroupResponseDefaultTypeInternal;
extern getGroupResponseDefaultTypeInternal _getGroupResponse_default_instance_;
class groupInfo;
struct groupInfoDefaultTypeInternal;
extern groupInfoDefaultTypeInternal _groupInfo_default_instance_;
}  // namespace fixbug
PROTOBUF_NAMESPACE_OPEN
template<> ::fixbug::AddGroupRequest* Arena::CreateMaybeMessage<::fixbug::AddGroupRequest>(Arena*);
template<> ::fixbug::AddGroupResponse* Arena::CreateMaybeMessage<::fixbug::AddGroupResponse>(Arena*);
template<> ::fixbug::SendMessageRequest* Arena::CreateMaybeMessage<::fixbug::SendMessageRequest>(Arena*);
template<> ::fixbug::SendMessageResponse* Arena::CreateMaybeMessage<::fixbug::SendMessageResponse>(Arena*);
template<> ::fixbug::createGroupRequest* Arena::CreateMaybeMessage<::fixbug::createGroupRequest>(Arena*);
template<> ::fixbug::createGroupResponse* Arena::CreateMaybeMessage<::fixbug::createGroupResponse>(Arena*);
template<> ::fixbug::getGroupRequest* Arena::CreateMaybeMessage<::fixbug::getGroupRequest>(Arena*);
template<> ::fixbug::getGroupResponse* Arena::CreateMaybeMessage<::fixbug::getGroupResponse>(Arena*);
template<> ::fixbug::groupInfo* Arena::CreateMaybeMessage<::fixbug::groupInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fixbug {

// ===================================================================

class createGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.createGroupRequest) */ {
 public:
  inline createGroupRequest() : createGroupRequest(nullptr) {}
  virtual ~createGroupRequest();
  explicit constexpr createGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  createGroupRequest(const createGroupRequest& from);
  createGroupRequest(createGroupRequest&& from) noexcept
    : createGroupRequest() {
    *this = ::std::move(from);
  }

  inline createGroupRequest& operator=(const createGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline createGroupRequest& operator=(createGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const createGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const createGroupRequest* internal_default_instance() {
    return reinterpret_cast<const createGroupRequest*>(
               &_createGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(createGroupRequest& a, createGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(createGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(createGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline createGroupRequest* New() const final {
    return CreateMaybeMessage<createGroupRequest>(nullptr);
  }

  createGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<createGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const createGroupRequest& from);
  void MergeFrom(const createGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(createGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.createGroupRequest";
  }
  protected:
  explicit createGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_group_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateTimeFieldNumber = 2,
    kUseridFieldNumber = 1,
  };
  // int64 createTime = 2;
  void clear_createtime();
  ::PROTOBUF_NAMESPACE_ID::int64 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createtime() const;
  void _internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.createGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 createtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class createGroupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.createGroupResponse) */ {
 public:
  inline createGroupResponse() : createGroupResponse(nullptr) {}
  virtual ~createGroupResponse();
  explicit constexpr createGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  createGroupResponse(const createGroupResponse& from);
  createGroupResponse(createGroupResponse&& from) noexcept
    : createGroupResponse() {
    *this = ::std::move(from);
  }

  inline createGroupResponse& operator=(const createGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline createGroupResponse& operator=(createGroupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const createGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const createGroupResponse* internal_default_instance() {
    return reinterpret_cast<const createGroupResponse*>(
               &_createGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(createGroupResponse& a, createGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(createGroupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(createGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline createGroupResponse* New() const final {
    return CreateMaybeMessage<createGroupResponse>(nullptr);
  }

  createGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<createGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const createGroupResponse& from);
  void MergeFrom(const createGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(createGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.createGroupResponse";
  }
  protected:
  explicit createGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_group_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupidFieldNumber = 1,
  };
  // int32 groupid = 1;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::int32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.createGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class AddGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.AddGroupRequest) */ {
 public:
  inline AddGroupRequest() : AddGroupRequest(nullptr) {}
  virtual ~AddGroupRequest();
  explicit constexpr AddGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddGroupRequest(const AddGroupRequest& from);
  AddGroupRequest(AddGroupRequest&& from) noexcept
    : AddGroupRequest() {
    *this = ::std::move(from);
  }

  inline AddGroupRequest& operator=(const AddGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupRequest& operator=(AddGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddGroupRequest* internal_default_instance() {
    return reinterpret_cast<const AddGroupRequest*>(
               &_AddGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddGroupRequest& a, AddGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGroupRequest* New() const final {
    return CreateMaybeMessage<AddGroupRequest>(nullptr);
  }

  AddGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGroupRequest& from);
  void MergeFrom(const AddGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.AddGroupRequest";
  }
  protected:
  explicit AddGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_group_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kGroupidFieldNumber = 2,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 groupid = 2;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::int32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.AddGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class AddGroupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.AddGroupResponse) */ {
 public:
  inline AddGroupResponse() : AddGroupResponse(nullptr) {}
  virtual ~AddGroupResponse();
  explicit constexpr AddGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddGroupResponse(const AddGroupResponse& from);
  AddGroupResponse(AddGroupResponse&& from) noexcept
    : AddGroupResponse() {
    *this = ::std::move(from);
  }

  inline AddGroupResponse& operator=(const AddGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupResponse& operator=(AddGroupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddGroupResponse* internal_default_instance() {
    return reinterpret_cast<const AddGroupResponse*>(
               &_AddGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddGroupResponse& a, AddGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGroupResponse* New() const final {
    return CreateMaybeMessage<AddGroupResponse>(nullptr);
  }

  AddGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGroupResponse& from);
  void MergeFrom(const AddGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.AddGroupResponse";
  }
  protected:
  explicit AddGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_group_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::fixbug::ResultCode* result);
  ::fixbug::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:fixbug.AddGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fixbug::ResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class SendMessageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.SendMessageRequest) */ {
 public:
  inline SendMessageRequest() : SendMessageRequest(nullptr) {}
  virtual ~SendMessageRequest();
  explicit constexpr SendMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMessageRequest(const SendMessageRequest& from);
  SendMessageRequest(SendMessageRequest&& from) noexcept
    : SendMessageRequest() {
    *this = ::std::move(from);
  }

  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageRequest& operator=(SendMessageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendMessageRequest*>(
               &_SendMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SendMessageRequest& a, SendMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageRequest* New() const final {
    return CreateMaybeMessage<SendMessageRequest>(nullptr);
  }

  SendMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageRequest& from);
  void MergeFrom(const SendMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.SendMessageRequest";
  }
  protected:
  explicit SendMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_group_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kUseridFieldNumber = 1,
  };
  // .fixbug.GroupMessage msg = 3;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::fixbug::GroupMessage& msg() const;
  ::fixbug::GroupMessage* release_msg();
  ::fixbug::GroupMessage* mutable_msg();
  void set_allocated_msg(::fixbug::GroupMessage* msg);
  private:
  const ::fixbug::GroupMessage& _internal_msg() const;
  ::fixbug::GroupMessage* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::fixbug::GroupMessage* msg);
  ::fixbug::GroupMessage* unsafe_arena_release_msg();

  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.SendMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fixbug::GroupMessage* msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class SendMessageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.SendMessageResponse) */ {
 public:
  inline SendMessageResponse() : SendMessageResponse(nullptr) {}
  virtual ~SendMessageResponse();
  explicit constexpr SendMessageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMessageResponse(const SendMessageResponse& from);
  SendMessageResponse(SendMessageResponse&& from) noexcept
    : SendMessageResponse() {
    *this = ::std::move(from);
  }

  inline SendMessageResponse& operator=(const SendMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageResponse& operator=(SendMessageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SendMessageResponse*>(
               &_SendMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendMessageResponse& a, SendMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageResponse* New() const final {
    return CreateMaybeMessage<SendMessageResponse>(nullptr);
  }

  SendMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageResponse& from);
  void MergeFrom(const SendMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.SendMessageResponse";
  }
  protected:
  explicit SendMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_group_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .fixbug.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::fixbug::ResultCode& result() const;
  ::fixbug::ResultCode* release_result();
  ::fixbug::ResultCode* mutable_result();
  void set_allocated_result(::fixbug::ResultCode* result);
  private:
  const ::fixbug::ResultCode& _internal_result() const;
  ::fixbug::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::fixbug::ResultCode* result);
  ::fixbug::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:fixbug.SendMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fixbug::ResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class groupInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.groupInfo) */ {
 public:
  inline groupInfo() : groupInfo(nullptr) {}
  virtual ~groupInfo();
  explicit constexpr groupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  groupInfo(const groupInfo& from);
  groupInfo(groupInfo&& from) noexcept
    : groupInfo() {
    *this = ::std::move(from);
  }

  inline groupInfo& operator=(const groupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline groupInfo& operator=(groupInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const groupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const groupInfo* internal_default_instance() {
    return reinterpret_cast<const groupInfo*>(
               &_groupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(groupInfo& a, groupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(groupInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(groupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline groupInfo* New() const final {
    return CreateMaybeMessage<groupInfo>(nullptr);
  }

  groupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<groupInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const groupInfo& from);
  void MergeFrom(const groupInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(groupInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.groupInfo";
  }
  protected:
  explicit groupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_group_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupidFieldNumber = 1,
    kAdminidFieldNumber = 2,
    kCreateTimeFieldNumber = 3,
    kUsersnumFieldNumber = 4,
  };
  // int32 groupid = 1;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::int32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 adminid = 2;
  void clear_adminid();
  ::PROTOBUF_NAMESPACE_ID::int32 adminid() const;
  void set_adminid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_adminid() const;
  void _internal_set_adminid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 createTime = 3;
  void clear_createtime();
  ::PROTOBUF_NAMESPACE_ID::int64 createtime() const;
  void set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createtime() const;
  void _internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 usersnum = 4;
  void clear_usersnum();
  ::PROTOBUF_NAMESPACE_ID::int32 usersnum() const;
  void set_usersnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usersnum() const;
  void _internal_set_usersnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.groupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 groupid_;
  ::PROTOBUF_NAMESPACE_ID::int32 adminid_;
  ::PROTOBUF_NAMESPACE_ID::int64 createtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 usersnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class getGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.getGroupRequest) */ {
 public:
  inline getGroupRequest() : getGroupRequest(nullptr) {}
  virtual ~getGroupRequest();
  explicit constexpr getGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getGroupRequest(const getGroupRequest& from);
  getGroupRequest(getGroupRequest&& from) noexcept
    : getGroupRequest() {
    *this = ::std::move(from);
  }

  inline getGroupRequest& operator=(const getGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getGroupRequest& operator=(getGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getGroupRequest* internal_default_instance() {
    return reinterpret_cast<const getGroupRequest*>(
               &_getGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(getGroupRequest& a, getGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getGroupRequest* New() const final {
    return CreateMaybeMessage<getGroupRequest>(nullptr);
  }

  getGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getGroupRequest& from);
  void MergeFrom(const getGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.getGroupRequest";
  }
  protected:
  explicit getGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_group_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.getGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// -------------------------------------------------------------------

class getGroupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.getGroupResponse) */ {
 public:
  inline getGroupResponse() : getGroupResponse(nullptr) {}
  virtual ~getGroupResponse();
  explicit constexpr getGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getGroupResponse(const getGroupResponse& from);
  getGroupResponse(getGroupResponse&& from) noexcept
    : getGroupResponse() {
    *this = ::std::move(from);
  }

  inline getGroupResponse& operator=(const getGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getGroupResponse& operator=(getGroupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getGroupResponse* internal_default_instance() {
    return reinterpret_cast<const getGroupResponse*>(
               &_getGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(getGroupResponse& a, getGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getGroupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getGroupResponse* New() const final {
    return CreateMaybeMessage<getGroupResponse>(nullptr);
  }

  getGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getGroupResponse& from);
  void MergeFrom(const getGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.getGroupResponse";
  }
  protected:
  explicit getGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_group_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
  };
  // repeated .fixbug.groupInfo group = 1;
  int group_size() const;
  private:
  int _internal_group_size() const;
  public:
  void clear_group();
  ::fixbug::groupInfo* mutable_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::groupInfo >*
      mutable_group();
  private:
  const ::fixbug::groupInfo& _internal_group(int index) const;
  ::fixbug::groupInfo* _internal_add_group();
  public:
  const ::fixbug::groupInfo& group(int index) const;
  ::fixbug::groupInfo* add_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::groupInfo >&
      group() const;

  // @@protoc_insertion_point(class_scope:fixbug.getGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::groupInfo > group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_group_2eproto;
};
// ===================================================================

class RpcGroupChat_Stub;

class RpcGroupChat : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RpcGroupChat() {};
 public:
  virtual ~RpcGroupChat();

  typedef RpcGroupChat_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::AddGroupRequest* request,
                       ::fixbug::AddGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SendMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::SendMessageRequest* request,
                       ::fixbug::SendMessageResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::getGroupRequest* request,
                       ::fixbug::getGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void createGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::createGroupRequest* request,
                       ::fixbug::createGroupResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RpcGroupChat);
};

class RpcGroupChat_Stub : public RpcGroupChat {
 public:
  RpcGroupChat_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RpcGroupChat_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RpcGroupChat_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RpcGroupChat ------------------------------------------

  void AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::AddGroupRequest* request,
                       ::fixbug::AddGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void SendMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::SendMessageRequest* request,
                       ::fixbug::SendMessageResponse* response,
                       ::google::protobuf::Closure* done);
  void GetGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::getGroupRequest* request,
                       ::fixbug::getGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void createGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::fixbug::createGroupRequest* request,
                       ::fixbug::createGroupResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RpcGroupChat_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// createGroupRequest

// int32 userid = 1;
inline void createGroupRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 createGroupRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 createGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.createGroupRequest.userid)
  return _internal_userid();
}
inline void createGroupRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void createGroupRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.createGroupRequest.userid)
}

// int64 createTime = 2;
inline void createGroupRequest::clear_createtime() {
  createtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 createGroupRequest::_internal_createtime() const {
  return createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 createGroupRequest::createtime() const {
  // @@protoc_insertion_point(field_get:fixbug.createGroupRequest.createTime)
  return _internal_createtime();
}
inline void createGroupRequest::_internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createtime_ = value;
}
inline void createGroupRequest::set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:fixbug.createGroupRequest.createTime)
}

// -------------------------------------------------------------------

// createGroupResponse

// int32 groupid = 1;
inline void createGroupResponse::clear_groupid() {
  groupid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 createGroupResponse::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 createGroupResponse::groupid() const {
  // @@protoc_insertion_point(field_get:fixbug.createGroupResponse.groupid)
  return _internal_groupid();
}
inline void createGroupResponse::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  groupid_ = value;
}
inline void createGroupResponse::set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:fixbug.createGroupResponse.groupid)
}

// -------------------------------------------------------------------

// AddGroupRequest

// int32 userid = 1;
inline void AddGroupRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroupRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.AddGroupRequest.userid)
  return _internal_userid();
}
inline void AddGroupRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void AddGroupRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.AddGroupRequest.userid)
}

// int32 groupid = 2;
inline void AddGroupRequest::clear_groupid() {
  groupid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroupRequest::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddGroupRequest::groupid() const {
  // @@protoc_insertion_point(field_get:fixbug.AddGroupRequest.groupid)
  return _internal_groupid();
}
inline void AddGroupRequest::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  groupid_ = value;
}
inline void AddGroupRequest::set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:fixbug.AddGroupRequest.groupid)
}

// -------------------------------------------------------------------

// AddGroupResponse

// .fixbug.ResultCode result = 1;
inline bool AddGroupResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AddGroupResponse::has_result() const {
  return _internal_has_result();
}
inline const ::fixbug::ResultCode& AddGroupResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::fixbug::ResultCode&>(
      ::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& AddGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.AddGroupResponse.result)
  return _internal_result();
}
inline void AddGroupResponse::unsafe_arena_set_allocated_result(
    ::fixbug::ResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.AddGroupResponse.result)
}
inline ::fixbug::ResultCode* AddGroupResponse::release_result() {
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fixbug::ResultCode* AddGroupResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:fixbug.AddGroupResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* AddGroupResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* AddGroupResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.AddGroupResponse.result)
  return _internal_mutable_result();
}
inline void AddGroupResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result)->GetArena();
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.AddGroupResponse.result)
}

// -------------------------------------------------------------------

// SendMessageRequest

// int32 userid = 1;
inline void SendMessageRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMessageRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendMessageRequest::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.SendMessageRequest.userid)
  return _internal_userid();
}
inline void SendMessageRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void SendMessageRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.SendMessageRequest.userid)
}

// .fixbug.GroupMessage msg = 3;
inline bool SendMessageRequest::_internal_has_msg() const {
  return this != internal_default_instance() && msg_ != nullptr;
}
inline bool SendMessageRequest::has_msg() const {
  return _internal_has_msg();
}
inline const ::fixbug::GroupMessage& SendMessageRequest::_internal_msg() const {
  const ::fixbug::GroupMessage* p = msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::fixbug::GroupMessage&>(
      ::fixbug::_GroupMessage_default_instance_);
}
inline const ::fixbug::GroupMessage& SendMessageRequest::msg() const {
  // @@protoc_insertion_point(field_get:fixbug.SendMessageRequest.msg)
  return _internal_msg();
}
inline void SendMessageRequest::unsafe_arena_set_allocated_msg(
    ::fixbug::GroupMessage* msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.SendMessageRequest.msg)
}
inline ::fixbug::GroupMessage* SendMessageRequest::release_msg() {
  
  ::fixbug::GroupMessage* temp = msg_;
  msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fixbug::GroupMessage* SendMessageRequest::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:fixbug.SendMessageRequest.msg)
  
  ::fixbug::GroupMessage* temp = msg_;
  msg_ = nullptr;
  return temp;
}
inline ::fixbug::GroupMessage* SendMessageRequest::_internal_mutable_msg() {
  
  if (msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::GroupMessage>(GetArena());
    msg_ = p;
  }
  return msg_;
}
inline ::fixbug::GroupMessage* SendMessageRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:fixbug.SendMessageRequest.msg)
  return _internal_mutable_msg();
}
inline void SendMessageRequest::set_allocated_msg(::fixbug::GroupMessage* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg)->GetArena();
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:fixbug.SendMessageRequest.msg)
}

// -------------------------------------------------------------------

// SendMessageResponse

// .fixbug.ResultCode result = 1;
inline bool SendMessageResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SendMessageResponse::has_result() const {
  return _internal_has_result();
}
inline const ::fixbug::ResultCode& SendMessageResponse::_internal_result() const {
  const ::fixbug::ResultCode* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::fixbug::ResultCode&>(
      ::fixbug::_ResultCode_default_instance_);
}
inline const ::fixbug::ResultCode& SendMessageResponse::result() const {
  // @@protoc_insertion_point(field_get:fixbug.SendMessageResponse.result)
  return _internal_result();
}
inline void SendMessageResponse::unsafe_arena_set_allocated_result(
    ::fixbug::ResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.SendMessageResponse.result)
}
inline ::fixbug::ResultCode* SendMessageResponse::release_result() {
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fixbug::ResultCode* SendMessageResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:fixbug.SendMessageResponse.result)
  
  ::fixbug::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::fixbug::ResultCode* SendMessageResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::ResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::fixbug::ResultCode* SendMessageResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:fixbug.SendMessageResponse.result)
  return _internal_mutable_result();
}
inline void SendMessageResponse::set_allocated_result(::fixbug::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result)->GetArena();
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.SendMessageResponse.result)
}

// -------------------------------------------------------------------

// groupInfo

// int32 groupid = 1;
inline void groupInfo::clear_groupid() {
  groupid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 groupInfo::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 groupInfo::groupid() const {
  // @@protoc_insertion_point(field_get:fixbug.groupInfo.groupid)
  return _internal_groupid();
}
inline void groupInfo::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  groupid_ = value;
}
inline void groupInfo::set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:fixbug.groupInfo.groupid)
}

// int32 adminid = 2;
inline void groupInfo::clear_adminid() {
  adminid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 groupInfo::_internal_adminid() const {
  return adminid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 groupInfo::adminid() const {
  // @@protoc_insertion_point(field_get:fixbug.groupInfo.adminid)
  return _internal_adminid();
}
inline void groupInfo::_internal_set_adminid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  adminid_ = value;
}
inline void groupInfo::set_adminid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_adminid(value);
  // @@protoc_insertion_point(field_set:fixbug.groupInfo.adminid)
}

// int64 createTime = 3;
inline void groupInfo::clear_createtime() {
  createtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 groupInfo::_internal_createtime() const {
  return createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 groupInfo::createtime() const {
  // @@protoc_insertion_point(field_get:fixbug.groupInfo.createTime)
  return _internal_createtime();
}
inline void groupInfo::_internal_set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createtime_ = value;
}
inline void groupInfo::set_createtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:fixbug.groupInfo.createTime)
}

// int32 usersnum = 4;
inline void groupInfo::clear_usersnum() {
  usersnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 groupInfo::_internal_usersnum() const {
  return usersnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 groupInfo::usersnum() const {
  // @@protoc_insertion_point(field_get:fixbug.groupInfo.usersnum)
  return _internal_usersnum();
}
inline void groupInfo::_internal_set_usersnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usersnum_ = value;
}
inline void groupInfo::set_usersnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usersnum(value);
  // @@protoc_insertion_point(field_set:fixbug.groupInfo.usersnum)
}

// -------------------------------------------------------------------

// getGroupRequest

// int32 userid = 1;
inline void getGroupRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getGroupRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.getGroupRequest.userid)
  return _internal_userid();
}
inline void getGroupRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void getGroupRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.getGroupRequest.userid)
}

// -------------------------------------------------------------------

// getGroupResponse

// repeated .fixbug.groupInfo group = 1;
inline int getGroupResponse::_internal_group_size() const {
  return group_.size();
}
inline int getGroupResponse::group_size() const {
  return _internal_group_size();
}
inline void getGroupResponse::clear_group() {
  group_.Clear();
}
inline ::fixbug::groupInfo* getGroupResponse::mutable_group(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.getGroupResponse.group)
  return group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::groupInfo >*
getGroupResponse::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.getGroupResponse.group)
  return &group_;
}
inline const ::fixbug::groupInfo& getGroupResponse::_internal_group(int index) const {
  return group_.Get(index);
}
inline const ::fixbug::groupInfo& getGroupResponse::group(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.getGroupResponse.group)
  return _internal_group(index);
}
inline ::fixbug::groupInfo* getGroupResponse::_internal_add_group() {
  return group_.Add();
}
inline ::fixbug::groupInfo* getGroupResponse::add_group() {
  // @@protoc_insertion_point(field_add:fixbug.getGroupResponse.group)
  return _internal_add_group();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::groupInfo >&
getGroupResponse::group() const {
  // @@protoc_insertion_point(field_list:fixbug.getGroupResponse.group)
  return group_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbug

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_group_2eproto
