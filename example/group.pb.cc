// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#include "group.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace fixbug {
constexpr createGroupRequest::createGroupRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : createtime_(PROTOBUF_LONGLONG(0))
  , userid_(0){}
struct createGroupRequestDefaultTypeInternal {
  constexpr createGroupRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~createGroupRequestDefaultTypeInternal() {}
  union {
    createGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT createGroupRequestDefaultTypeInternal _createGroupRequest_default_instance_;
constexpr createGroupResponse::createGroupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groupid_(0){}
struct createGroupResponseDefaultTypeInternal {
  constexpr createGroupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~createGroupResponseDefaultTypeInternal() {}
  union {
    createGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT createGroupResponseDefaultTypeInternal _createGroupResponse_default_instance_;
constexpr AddGroupRequest::AddGroupRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(0)
  , groupid_(0){}
struct AddGroupRequestDefaultTypeInternal {
  constexpr AddGroupRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddGroupRequestDefaultTypeInternal() {}
  union {
    AddGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddGroupRequestDefaultTypeInternal _AddGroupRequest_default_instance_;
constexpr AddGroupResponse::AddGroupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr){}
struct AddGroupResponseDefaultTypeInternal {
  constexpr AddGroupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddGroupResponseDefaultTypeInternal() {}
  union {
    AddGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddGroupResponseDefaultTypeInternal _AddGroupResponse_default_instance_;
constexpr SendMessageRequest::SendMessageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(nullptr)
  , userid_(0){}
struct SendMessageRequestDefaultTypeInternal {
  constexpr SendMessageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendMessageRequestDefaultTypeInternal() {}
  union {
    SendMessageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendMessageRequestDefaultTypeInternal _SendMessageRequest_default_instance_;
constexpr SendMessageResponse::SendMessageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr){}
struct SendMessageResponseDefaultTypeInternal {
  constexpr SendMessageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendMessageResponseDefaultTypeInternal() {}
  union {
    SendMessageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendMessageResponseDefaultTypeInternal _SendMessageResponse_default_instance_;
constexpr groupInfo::groupInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groupid_(0)
  , adminid_(0)
  , createtime_(PROTOBUF_LONGLONG(0))
  , usersnum_(0){}
struct groupInfoDefaultTypeInternal {
  constexpr groupInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~groupInfoDefaultTypeInternal() {}
  union {
    groupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT groupInfoDefaultTypeInternal _groupInfo_default_instance_;
constexpr getGroupRequest::getGroupRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(0){}
struct getGroupRequestDefaultTypeInternal {
  constexpr getGroupRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getGroupRequestDefaultTypeInternal() {}
  union {
    getGroupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getGroupRequestDefaultTypeInternal _getGroupRequest_default_instance_;
constexpr getGroupResponse::getGroupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_(){}
struct getGroupResponseDefaultTypeInternal {
  constexpr getGroupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getGroupResponseDefaultTypeInternal() {}
  union {
    getGroupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getGroupResponseDefaultTypeInternal _getGroupResponse_default_instance_;
}  // namespace fixbug
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_group_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_group_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_group_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_group_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::createGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::createGroupRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::fixbug::createGroupRequest, createtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::createGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::createGroupResponse, groupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::AddGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::AddGroupRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::fixbug::AddGroupRequest, groupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::AddGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::AddGroupResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::SendMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::SendMessageRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::fixbug::SendMessageRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::SendMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::SendMessageResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::groupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::groupInfo, groupid_),
  PROTOBUF_FIELD_OFFSET(::fixbug::groupInfo, adminid_),
  PROTOBUF_FIELD_OFFSET(::fixbug::groupInfo, createtime_),
  PROTOBUF_FIELD_OFFSET(::fixbug::groupInfo, usersnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::getGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::getGroupRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::getGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::getGroupResponse, group_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fixbug::createGroupRequest)},
  { 7, -1, sizeof(::fixbug::createGroupResponse)},
  { 13, -1, sizeof(::fixbug::AddGroupRequest)},
  { 20, -1, sizeof(::fixbug::AddGroupResponse)},
  { 26, -1, sizeof(::fixbug::SendMessageRequest)},
  { 33, -1, sizeof(::fixbug::SendMessageResponse)},
  { 39, -1, sizeof(::fixbug::groupInfo)},
  { 48, -1, sizeof(::fixbug::getGroupRequest)},
  { 54, -1, sizeof(::fixbug::getGroupResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_createGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_createGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_AddGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_AddGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_SendMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_SendMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_groupInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_getGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_getGroupResponse_default_instance_),
};

const char descriptor_table_protodef_group_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013group.proto\022\006fixbug\032\014public.proto\032\021cha"
  "tservice.proto\"8\n\022createGroupRequest\022\016\n\006"
  "userid\030\001 \001(\005\022\022\n\ncreateTime\030\002 \001(\003\"&\n\023crea"
  "teGroupResponse\022\017\n\007groupid\030\001 \001(\005\"2\n\017AddG"
  "roupRequest\022\016\n\006userid\030\001 \001(\005\022\017\n\007groupid\030\002"
  " \001(\005\"6\n\020AddGroupResponse\022\"\n\006result\030\001 \001(\013"
  "2\022.fixbug.ResultCode\"G\n\022SendMessageReque"
  "st\022\016\n\006userid\030\001 \001(\005\022!\n\003msg\030\003 \001(\0132\024.fixbug"
  ".GroupMessage\"9\n\023SendMessageResponse\022\"\n\006"
  "result\030\001 \001(\0132\022.fixbug.ResultCode\"S\n\tgrou"
  "pInfo\022\017\n\007groupid\030\001 \001(\005\022\017\n\007adminid\030\002 \001(\005\022"
  "\022\n\ncreateTime\030\003 \001(\003\022\020\n\010usersnum\030\004 \001(\005\"!\n"
  "\017getGroupRequest\022\016\n\006userid\030\001 \001(\005\"4\n\020getG"
  "roupResponse\022 \n\005group\030\001 \003(\0132\021.fixbug.gro"
  "upInfo2\230\002\n\014RpcGroupChat\022=\n\010AddGroup\022\027.fi"
  "xbug.AddGroupRequest\032\030.fixbug.AddGroupRe"
  "sponse\022B\n\007SendMsg\022\032.fixbug.SendMessageRe"
  "quest\032\033.fixbug.SendMessageResponse\022=\n\010Ge"
  "tGroup\022\027.fixbug.getGroupRequest\032\030.fixbug"
  ".getGroupResponse\022F\n\013createGroup\022\032.fixbu"
  "g.createGroupRequest\032\033.fixbug.createGrou"
  "pResponseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_group_2eproto_deps[2] = {
  &::descriptor_table_chatservice_2eproto,
  &::descriptor_table_public_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_group_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_group_2eproto = {
  false, false, 862, descriptor_table_protodef_group_2eproto, "group.proto", 
  &descriptor_table_group_2eproto_once, descriptor_table_group_2eproto_deps, 2, 9,
  schemas, file_default_instances, TableStruct_group_2eproto::offsets,
  file_level_metadata_group_2eproto, file_level_enum_descriptors_group_2eproto, file_level_service_descriptors_group_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_group_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_group_2eproto);
  return descriptor_table_group_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_group_2eproto(&descriptor_table_group_2eproto);
namespace fixbug {

// ===================================================================

class createGroupRequest::_Internal {
 public:
};

createGroupRequest::createGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.createGroupRequest)
}
createGroupRequest::createGroupRequest(const createGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&createtime_, &from.createtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&createtime_)) + sizeof(userid_));
  // @@protoc_insertion_point(copy_constructor:fixbug.createGroupRequest)
}

void createGroupRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&createtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&createtime_)) + sizeof(userid_));
}

createGroupRequest::~createGroupRequest() {
  // @@protoc_insertion_point(destructor:fixbug.createGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void createGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void createGroupRequest::ArenaDtor(void* object) {
  createGroupRequest* _this = reinterpret_cast< createGroupRequest* >(object);
  (void)_this;
}
void createGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void createGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void createGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.createGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&createtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&createtime_)) + sizeof(userid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* createGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* createGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.createGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // int64 createTime = 2;
  if (this->createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_createtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.createGroupRequest)
  return target;
}

size_t createGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.createGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 createTime = 2;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createtime());
  }

  // int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void createGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.createGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const createGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<createGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.createGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.createGroupRequest)
    MergeFrom(*source);
  }
}

void createGroupRequest::MergeFrom(const createGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.createGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void createGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.createGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void createGroupRequest::CopyFrom(const createGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.createGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createGroupRequest::IsInitialized() const {
  return true;
}

void createGroupRequest::InternalSwap(createGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(createGroupRequest, userid_)
      + sizeof(createGroupRequest::userid_)
      - PROTOBUF_FIELD_OFFSET(createGroupRequest, createtime_)>(
          reinterpret_cast<char*>(&createtime_),
          reinterpret_cast<char*>(&other->createtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata createGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class createGroupResponse::_Internal {
 public:
};

createGroupResponse::createGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.createGroupResponse)
}
createGroupResponse::createGroupResponse(const createGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:fixbug.createGroupResponse)
}

void createGroupResponse::SharedCtor() {
groupid_ = 0;
}

createGroupResponse::~createGroupResponse() {
  // @@protoc_insertion_point(destructor:fixbug.createGroupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void createGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void createGroupResponse::ArenaDtor(void* object) {
  createGroupResponse* _this = reinterpret_cast< createGroupResponse* >(object);
  (void)_this;
}
void createGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void createGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void createGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.createGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* createGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* createGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.createGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 groupid = 1;
  if (this->groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.createGroupResponse)
  return target;
}

size_t createGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.createGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 groupid = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_groupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void createGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.createGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const createGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<createGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.createGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.createGroupResponse)
    MergeFrom(*source);
  }
}

void createGroupResponse::MergeFrom(const createGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.createGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
}

void createGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.createGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void createGroupResponse::CopyFrom(const createGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.createGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createGroupResponse::IsInitialized() const {
  return true;
}

void createGroupResponse::InternalSwap(createGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(groupid_, other->groupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata createGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddGroupRequest::_Internal {
 public:
};

AddGroupRequest::AddGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.AddGroupRequest)
}
AddGroupRequest::AddGroupRequest(const AddGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:fixbug.AddGroupRequest)
}

void AddGroupRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&userid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(groupid_));
}

AddGroupRequest::~AddGroupRequest() {
  // @@protoc_insertion_point(destructor:fixbug.AddGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddGroupRequest::ArenaDtor(void* object) {
  AddGroupRequest* _this = reinterpret_cast< AddGroupRequest* >(object);
  (void)_this;
}
void AddGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.AddGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(groupid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 groupid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.AddGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // int32 groupid = 2;
  if (this->groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.AddGroupRequest)
  return target;
}

size_t AddGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.AddGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  // int32 groupid = 2;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_groupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.AddGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.AddGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.AddGroupRequest)
    MergeFrom(*source);
  }
}

void AddGroupRequest::MergeFrom(const AddGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.AddGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
}

void AddGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.AddGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupRequest::CopyFrom(const AddGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.AddGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupRequest::IsInitialized() const {
  return true;
}

void AddGroupRequest::InternalSwap(AddGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddGroupRequest, groupid_)
      + sizeof(AddGroupRequest::groupid_)
      - PROTOBUF_FIELD_OFFSET(AddGroupRequest, userid_)>(
          reinterpret_cast<char*>(&userid_),
          reinterpret_cast<char*>(&other->userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddGroupResponse::_Internal {
 public:
  static const ::fixbug::ResultCode& result(const AddGroupResponse* msg);
};

const ::fixbug::ResultCode&
AddGroupResponse::_Internal::result(const AddGroupResponse* msg) {
  return *msg->result_;
}
void AddGroupResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
AddGroupResponse::AddGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.AddGroupResponse)
}
AddGroupResponse::AddGroupResponse(const AddGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::fixbug::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fixbug.AddGroupResponse)
}

void AddGroupResponse::SharedCtor() {
result_ = nullptr;
}

AddGroupResponse::~AddGroupResponse() {
  // @@protoc_insertion_point(destructor:fixbug.AddGroupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void AddGroupResponse::ArenaDtor(void* object) {
  AddGroupResponse* _this = reinterpret_cast< AddGroupResponse* >(object);
  (void)_this;
}
void AddGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.AddGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fixbug.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.AddGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.AddGroupResponse)
  return target;
}

size_t AddGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.AddGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.AddGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.AddGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.AddGroupResponse)
    MergeFrom(*source);
  }
}

void AddGroupResponse::MergeFrom(const AddGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.AddGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::fixbug::ResultCode::MergeFrom(from._internal_result());
  }
}

void AddGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.AddGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupResponse::CopyFrom(const AddGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.AddGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupResponse::IsInitialized() const {
  return true;
}

void AddGroupResponse::InternalSwap(AddGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendMessageRequest::_Internal {
 public:
  static const ::fixbug::GroupMessage& msg(const SendMessageRequest* msg);
};

const ::fixbug::GroupMessage&
SendMessageRequest::_Internal::msg(const SendMessageRequest* msg) {
  return *msg->msg_;
}
void SendMessageRequest::clear_msg() {
  if (GetArena() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
}
SendMessageRequest::SendMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.SendMessageRequest)
}
SendMessageRequest::SendMessageRequest(const SendMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    msg_ = new ::fixbug::GroupMessage(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:fixbug.SendMessageRequest)
}

void SendMessageRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
    reinterpret_cast<char*>(&msg_)) + sizeof(userid_));
}

SendMessageRequest::~SendMessageRequest() {
  // @@protoc_insertion_point(destructor:fixbug.SendMessageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete msg_;
}

void SendMessageRequest::ArenaDtor(void* object) {
  SendMessageRequest* _this = reinterpret_cast< SendMessageRequest* >(object);
  (void)_this;
}
void SendMessageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.SendMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
  userid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fixbug.GroupMessage msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.SendMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // .fixbug.GroupMessage msg = 3;
  if (this->has_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.SendMessageRequest)
  return target;
}

size_t SendMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.SendMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fixbug.GroupMessage msg = 3;
  if (this->has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  // int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.SendMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.SendMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.SendMessageRequest)
    MergeFrom(*source);
  }
}

void SendMessageRequest::MergeFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.SendMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg()) {
    _internal_mutable_msg()->::fixbug::GroupMessage::MergeFrom(from._internal_msg());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void SendMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageRequest::CopyFrom(const SendMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.SendMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequest::IsInitialized() const {
  return true;
}

void SendMessageRequest::InternalSwap(SendMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageRequest, userid_)
      + sizeof(SendMessageRequest::userid_)
      - PROTOBUF_FIELD_OFFSET(SendMessageRequest, msg_)>(
          reinterpret_cast<char*>(&msg_),
          reinterpret_cast<char*>(&other->msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendMessageResponse::_Internal {
 public:
  static const ::fixbug::ResultCode& result(const SendMessageResponse* msg);
};

const ::fixbug::ResultCode&
SendMessageResponse::_Internal::result(const SendMessageResponse* msg) {
  return *msg->result_;
}
void SendMessageResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
SendMessageResponse::SendMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.SendMessageResponse)
}
SendMessageResponse::SendMessageResponse(const SendMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::fixbug::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fixbug.SendMessageResponse)
}

void SendMessageResponse::SharedCtor() {
result_ = nullptr;
}

SendMessageResponse::~SendMessageResponse() {
  // @@protoc_insertion_point(destructor:fixbug.SendMessageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void SendMessageResponse::ArenaDtor(void* object) {
  SendMessageResponse* _this = reinterpret_cast< SendMessageResponse* >(object);
  (void)_this;
}
void SendMessageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.SendMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fixbug.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.SendMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.SendMessageResponse)
  return target;
}

size_t SendMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.SendMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.SendMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.SendMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.SendMessageResponse)
    MergeFrom(*source);
  }
}

void SendMessageResponse::MergeFrom(const SendMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.SendMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::fixbug::ResultCode::MergeFrom(from._internal_result());
  }
}

void SendMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.SendMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageResponse::CopyFrom(const SendMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.SendMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageResponse::IsInitialized() const {
  return true;
}

void SendMessageResponse::InternalSwap(SendMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class groupInfo::_Internal {
 public:
};

groupInfo::groupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.groupInfo)
}
groupInfo::groupInfo(const groupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&groupid_, &from.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&usersnum_) -
    reinterpret_cast<char*>(&groupid_)) + sizeof(usersnum_));
  // @@protoc_insertion_point(copy_constructor:fixbug.groupInfo)
}

void groupInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&groupid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&usersnum_) -
    reinterpret_cast<char*>(&groupid_)) + sizeof(usersnum_));
}

groupInfo::~groupInfo() {
  // @@protoc_insertion_point(destructor:fixbug.groupInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void groupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void groupInfo::ArenaDtor(void* object) {
  groupInfo* _this = reinterpret_cast< groupInfo* >(object);
  (void)_this;
}
void groupInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void groupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void groupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.groupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usersnum_) -
      reinterpret_cast<char*>(&groupid_)) + sizeof(usersnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* groupInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 adminid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          adminid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 usersnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          usersnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* groupInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.groupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 groupid = 1;
  if (this->groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_groupid(), target);
  }

  // int32 adminid = 2;
  if (this->adminid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_adminid(), target);
  }

  // int64 createTime = 3;
  if (this->createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_createtime(), target);
  }

  // int32 usersnum = 4;
  if (this->usersnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_usersnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.groupInfo)
  return target;
}

size_t groupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.groupInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 groupid = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_groupid());
  }

  // int32 adminid = 2;
  if (this->adminid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_adminid());
  }

  // int64 createTime = 3;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createtime());
  }

  // int32 usersnum = 4;
  if (this->usersnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usersnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void groupInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.groupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const groupInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<groupInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.groupInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.groupInfo)
    MergeFrom(*source);
  }
}

void groupInfo::MergeFrom(const groupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.groupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
  if (from.adminid() != 0) {
    _internal_set_adminid(from._internal_adminid());
  }
  if (from.createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
  if (from.usersnum() != 0) {
    _internal_set_usersnum(from._internal_usersnum());
  }
}

void groupInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.groupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void groupInfo::CopyFrom(const groupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.groupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool groupInfo::IsInitialized() const {
  return true;
}

void groupInfo::InternalSwap(groupInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(groupInfo, usersnum_)
      + sizeof(groupInfo::usersnum_)
      - PROTOBUF_FIELD_OFFSET(groupInfo, groupid_)>(
          reinterpret_cast<char*>(&groupid_),
          reinterpret_cast<char*>(&other->groupid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata groupInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getGroupRequest::_Internal {
 public:
};

getGroupRequest::getGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.getGroupRequest)
}
getGroupRequest::getGroupRequest(const getGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:fixbug.getGroupRequest)
}

void getGroupRequest::SharedCtor() {
userid_ = 0;
}

getGroupRequest::~getGroupRequest() {
  // @@protoc_insertion_point(destructor:fixbug.getGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void getGroupRequest::ArenaDtor(void* object) {
  getGroupRequest* _this = reinterpret_cast< getGroupRequest* >(object);
  (void)_this;
}
void getGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.getGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.getGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.getGroupRequest)
  return target;
}

size_t getGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.getGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.getGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const getGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.getGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.getGroupRequest)
    MergeFrom(*source);
  }
}

void getGroupRequest::MergeFrom(const getGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.getGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void getGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.getGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getGroupRequest::CopyFrom(const getGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.getGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getGroupRequest::IsInitialized() const {
  return true;
}

void getGroupRequest::InternalSwap(getGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getGroupResponse::_Internal {
 public:
};

getGroupResponse::getGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  group_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.getGroupResponse)
}
getGroupResponse::getGroupResponse(const getGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      group_(from.group_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fixbug.getGroupResponse)
}

void getGroupResponse::SharedCtor() {
}

getGroupResponse::~getGroupResponse() {
  // @@protoc_insertion_point(destructor:fixbug.getGroupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void getGroupResponse::ArenaDtor(void* object) {
  getGroupResponse* _this = reinterpret_cast< getGroupResponse* >(object);
  (void)_this;
}
void getGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.getGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fixbug.groupInfo group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.getGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fixbug.groupInfo group = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_group(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.getGroupResponse)
  return target;
}

size_t getGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.getGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fixbug.groupInfo group = 1;
  total_size += 1UL * this->_internal_group_size();
  for (const auto& msg : this->group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.getGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const getGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.getGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.getGroupResponse)
    MergeFrom(*source);
  }
}

void getGroupResponse::MergeFrom(const getGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.getGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_.MergeFrom(from.group_);
}

void getGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.getGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getGroupResponse::CopyFrom(const getGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.getGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getGroupResponse::IsInitialized() const {
  return true;
}

void getGroupResponse::InternalSwap(getGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  group_.InternalSwap(&other->group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RpcGroupChat::~RpcGroupChat() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcGroupChat::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_group_2eproto);
  return file_level_service_descriptors_group_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcGroupChat::GetDescriptor() {
  return descriptor();
}

void RpcGroupChat::AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::fixbug::AddGroupRequest*,
                         ::fixbug::AddGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddGroup() not implemented.");
  done->Run();
}

void RpcGroupChat::SendMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::fixbug::SendMessageRequest*,
                         ::fixbug::SendMessageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendMsg() not implemented.");
  done->Run();
}

void RpcGroupChat::GetGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::fixbug::getGroupRequest*,
                         ::fixbug::getGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGroup() not implemented.");
  done->Run();
}

void RpcGroupChat::createGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::fixbug::createGroupRequest*,
                         ::fixbug::createGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method createGroup() not implemented.");
  done->Run();
}

void RpcGroupChat::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_group_2eproto[0]);
  switch(method->index()) {
    case 0:
      AddGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::fixbug::AddGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::fixbug::AddGroupResponse*>(
                 response),
             done);
      break;
    case 1:
      SendMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::fixbug::SendMessageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::fixbug::SendMessageResponse*>(
                 response),
             done);
      break;
    case 2:
      GetGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::fixbug::getGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::fixbug::getGroupResponse*>(
                 response),
             done);
      break;
    case 3:
      createGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::fixbug::createGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::fixbug::createGroupResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcGroupChat::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fixbug::AddGroupRequest::default_instance();
    case 1:
      return ::fixbug::SendMessageRequest::default_instance();
    case 2:
      return ::fixbug::getGroupRequest::default_instance();
    case 3:
      return ::fixbug::createGroupRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcGroupChat::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fixbug::AddGroupResponse::default_instance();
    case 1:
      return ::fixbug::SendMessageResponse::default_instance();
    case 2:
      return ::fixbug::getGroupResponse::default_instance();
    case 3:
      return ::fixbug::createGroupResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RpcGroupChat_Stub::RpcGroupChat_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RpcGroupChat_Stub::RpcGroupChat_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RpcGroupChat_Stub::~RpcGroupChat_Stub() {
  if (owns_channel_) delete channel_;
}

void RpcGroupChat_Stub::AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::fixbug::AddGroupRequest* request,
                              ::fixbug::AddGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RpcGroupChat_Stub::SendMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::fixbug::SendMessageRequest* request,
                              ::fixbug::SendMessageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RpcGroupChat_Stub::GetGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::fixbug::getGroupRequest* request,
                              ::fixbug::getGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void RpcGroupChat_Stub::createGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::fixbug::createGroupRequest* request,
                              ::fixbug::createGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fixbug
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fixbug::createGroupRequest* Arena::CreateMaybeMessage< ::fixbug::createGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::createGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::createGroupResponse* Arena::CreateMaybeMessage< ::fixbug::createGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::createGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::AddGroupRequest* Arena::CreateMaybeMessage< ::fixbug::AddGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::AddGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::AddGroupResponse* Arena::CreateMaybeMessage< ::fixbug::AddGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::AddGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::SendMessageRequest* Arena::CreateMaybeMessage< ::fixbug::SendMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::SendMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::SendMessageResponse* Arena::CreateMaybeMessage< ::fixbug::SendMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::SendMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::groupInfo* Arena::CreateMaybeMessage< ::fixbug::groupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::groupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::getGroupRequest* Arena::CreateMaybeMessage< ::fixbug::getGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::getGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::getGroupResponse* Arena::CreateMaybeMessage< ::fixbug::getGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::getGroupResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
