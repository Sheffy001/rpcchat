// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chatservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chatservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chatservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chatservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chatservice_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_chatservice_2eproto_metadata_getter(int index);
namespace fixbug {
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class GroupMessage;
struct GroupMessageDefaultTypeInternal;
extern GroupMessageDefaultTypeInternal _GroupMessage_default_instance_;
}  // namespace fixbug
PROTOBUF_NAMESPACE_OPEN
template<> ::fixbug::ChatMessage* Arena::CreateMaybeMessage<::fixbug::ChatMessage>(Arena*);
template<> ::fixbug::GroupMessage* Arena::CreateMaybeMessage<::fixbug::GroupMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fixbug {

// ===================================================================

class ChatMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  virtual ~ChatMessage();
  explicit constexpr ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const final {
    return CreateMaybeMessage<ChatMessage>(nullptr);
  }

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_chatservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendnameFieldNumber = 4,
    kMsgFieldNumber = 5,
    kMethodFieldNumber = 1,
    kUseridFieldNumber = 2,
    kSendTimeFieldNumber = 6,
    kFriendidFieldNumber = 3,
  };
  // bytes friendname = 4;
  void clear_friendname();
  const std::string& friendname() const;
  void set_friendname(const std::string& value);
  void set_friendname(std::string&& value);
  void set_friendname(const char* value);
  void set_friendname(const void* value, size_t size);
  std::string* mutable_friendname();
  std::string* release_friendname();
  void set_allocated_friendname(std::string* friendname);
  private:
  const std::string& _internal_friendname() const;
  void _internal_set_friendname(const std::string& value);
  std::string* _internal_mutable_friendname();
  public:

  // bytes msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 method = 1;
  void clear_method();
  ::PROTOBUF_NAMESPACE_ID::int32 method() const;
  void set_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_method() const;
  void _internal_set_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 userid = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 send_time = 6;
  void clear_send_time();
  ::PROTOBUF_NAMESPACE_ID::int64 send_time() const;
  void set_send_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_send_time() const;
  void _internal_set_send_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 friendid = 3;
  void clear_friendid();
  ::PROTOBUF_NAMESPACE_ID::int32 friendid() const;
  void set_friendid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_friendid() const;
  void _internal_set_friendid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 method_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int64 send_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 friendid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatservice_2eproto;
};
// -------------------------------------------------------------------

class GroupMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.GroupMessage) */ {
 public:
  inline GroupMessage() : GroupMessage(nullptr) {}
  virtual ~GroupMessage();
  explicit constexpr GroupMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMessage(const GroupMessage& from);
  GroupMessage(GroupMessage&& from) noexcept
    : GroupMessage() {
    *this = ::std::move(from);
  }

  inline GroupMessage& operator=(const GroupMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMessage& operator=(GroupMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMessage* internal_default_instance() {
    return reinterpret_cast<const GroupMessage*>(
               &_GroupMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GroupMessage& a, GroupMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupMessage* New() const final {
    return CreateMaybeMessage<GroupMessage>(nullptr);
  }

  GroupMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupMessage& from);
  void MergeFrom(const GroupMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fixbug.GroupMessage";
  }
  protected:
  explicit GroupMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_chatservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembernameFieldNumber = 5,
    kMsgFieldNumber = 6,
    kMethodFieldNumber = 1,
    kUseridFieldNumber = 2,
    kGroupidFieldNumber = 3,
    kMemberidFieldNumber = 4,
    kSendTimeFieldNumber = 7,
  };
  // bytes membername = 5;
  void clear_membername();
  const std::string& membername() const;
  void set_membername(const std::string& value);
  void set_membername(std::string&& value);
  void set_membername(const char* value);
  void set_membername(const void* value, size_t size);
  std::string* mutable_membername();
  std::string* release_membername();
  void set_allocated_membername(std::string* membername);
  private:
  const std::string& _internal_membername() const;
  void _internal_set_membername(const std::string& value);
  std::string* _internal_mutable_membername();
  public:

  // bytes msg = 6;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 method = 1;
  void clear_method();
  ::PROTOBUF_NAMESPACE_ID::int32 method() const;
  void set_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_method() const;
  void _internal_set_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 userid = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 groupid = 3;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::int32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 memberid = 4;
  void clear_memberid();
  ::PROTOBUF_NAMESPACE_ID::int32 memberid() const;
  void set_memberid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_memberid() const;
  void _internal_set_memberid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 send_time = 7;
  void clear_send_time();
  ::PROTOBUF_NAMESPACE_ID::int64 send_time() const;
  void set_send_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_send_time() const;
  void _internal_set_send_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:fixbug.GroupMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 method_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 groupid_;
  ::PROTOBUF_NAMESPACE_ID::int32 memberid_;
  ::PROTOBUF_NAMESPACE_ID::int64 send_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chatservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessage

// int32 method = 1;
inline void ChatMessage::clear_method() {
  method_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessage::_internal_method() const {
  return method_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessage::method() const {
  // @@protoc_insertion_point(field_get:fixbug.ChatMessage.method)
  return _internal_method();
}
inline void ChatMessage::_internal_set_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  method_ = value;
}
inline void ChatMessage::set_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:fixbug.ChatMessage.method)
}

// int32 userid = 2;
inline void ChatMessage::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessage::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessage::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.ChatMessage.userid)
  return _internal_userid();
}
inline void ChatMessage::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void ChatMessage::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.ChatMessage.userid)
}

// int32 friendid = 3;
inline void ChatMessage::clear_friendid() {
  friendid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessage::_internal_friendid() const {
  return friendid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMessage::friendid() const {
  // @@protoc_insertion_point(field_get:fixbug.ChatMessage.friendid)
  return _internal_friendid();
}
inline void ChatMessage::_internal_set_friendid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  friendid_ = value;
}
inline void ChatMessage::set_friendid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:fixbug.ChatMessage.friendid)
}

// bytes friendname = 4;
inline void ChatMessage::clear_friendname() {
  friendname_.ClearToEmpty();
}
inline const std::string& ChatMessage::friendname() const {
  // @@protoc_insertion_point(field_get:fixbug.ChatMessage.friendname)
  return _internal_friendname();
}
inline void ChatMessage::set_friendname(const std::string& value) {
  _internal_set_friendname(value);
  // @@protoc_insertion_point(field_set:fixbug.ChatMessage.friendname)
}
inline std::string* ChatMessage::mutable_friendname() {
  // @@protoc_insertion_point(field_mutable:fixbug.ChatMessage.friendname)
  return _internal_mutable_friendname();
}
inline const std::string& ChatMessage::_internal_friendname() const {
  return friendname_.Get();
}
inline void ChatMessage::_internal_set_friendname(const std::string& value) {
  
  friendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChatMessage::set_friendname(std::string&& value) {
  
  friendname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbug.ChatMessage.friendname)
}
inline void ChatMessage::set_friendname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:fixbug.ChatMessage.friendname)
}
inline void ChatMessage::set_friendname(const void* value,
    size_t size) {
  
  friendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbug.ChatMessage.friendname)
}
inline std::string* ChatMessage::_internal_mutable_friendname() {
  
  return friendname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChatMessage::release_friendname() {
  // @@protoc_insertion_point(field_release:fixbug.ChatMessage.friendname)
  return friendname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessage::set_allocated_friendname(std::string* friendname) {
  if (friendname != nullptr) {
    
  } else {
    
  }
  friendname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbug.ChatMessage.friendname)
}

// bytes msg = 5;
inline void ChatMessage::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ChatMessage::msg() const {
  // @@protoc_insertion_point(field_get:fixbug.ChatMessage.msg)
  return _internal_msg();
}
inline void ChatMessage::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:fixbug.ChatMessage.msg)
}
inline std::string* ChatMessage::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:fixbug.ChatMessage.msg)
  return _internal_mutable_msg();
}
inline const std::string& ChatMessage::_internal_msg() const {
  return msg_.Get();
}
inline void ChatMessage::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChatMessage::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbug.ChatMessage.msg)
}
inline void ChatMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:fixbug.ChatMessage.msg)
}
inline void ChatMessage::set_msg(const void* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbug.ChatMessage.msg)
}
inline std::string* ChatMessage::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChatMessage::release_msg() {
  // @@protoc_insertion_point(field_release:fixbug.ChatMessage.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatMessage::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbug.ChatMessage.msg)
}

// int64 send_time = 6;
inline void ChatMessage::clear_send_time() {
  send_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatMessage::_internal_send_time() const {
  return send_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatMessage::send_time() const {
  // @@protoc_insertion_point(field_get:fixbug.ChatMessage.send_time)
  return _internal_send_time();
}
inline void ChatMessage::_internal_set_send_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  send_time_ = value;
}
inline void ChatMessage::set_send_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_send_time(value);
  // @@protoc_insertion_point(field_set:fixbug.ChatMessage.send_time)
}

// -------------------------------------------------------------------

// GroupMessage

// int32 method = 1;
inline void GroupMessage::clear_method() {
  method_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessage::_internal_method() const {
  return method_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessage::method() const {
  // @@protoc_insertion_point(field_get:fixbug.GroupMessage.method)
  return _internal_method();
}
inline void GroupMessage::_internal_set_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  method_ = value;
}
inline void GroupMessage::set_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:fixbug.GroupMessage.method)
}

// int32 userid = 2;
inline void GroupMessage::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessage::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessage::userid() const {
  // @@protoc_insertion_point(field_get:fixbug.GroupMessage.userid)
  return _internal_userid();
}
inline void GroupMessage::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void GroupMessage::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:fixbug.GroupMessage.userid)
}

// int32 groupid = 3;
inline void GroupMessage::clear_groupid() {
  groupid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessage::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessage::groupid() const {
  // @@protoc_insertion_point(field_get:fixbug.GroupMessage.groupid)
  return _internal_groupid();
}
inline void GroupMessage::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  groupid_ = value;
}
inline void GroupMessage::set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:fixbug.GroupMessage.groupid)
}

// int32 memberid = 4;
inline void GroupMessage::clear_memberid() {
  memberid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessage::_internal_memberid() const {
  return memberid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMessage::memberid() const {
  // @@protoc_insertion_point(field_get:fixbug.GroupMessage.memberid)
  return _internal_memberid();
}
inline void GroupMessage::_internal_set_memberid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  memberid_ = value;
}
inline void GroupMessage::set_memberid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_memberid(value);
  // @@protoc_insertion_point(field_set:fixbug.GroupMessage.memberid)
}

// bytes membername = 5;
inline void GroupMessage::clear_membername() {
  membername_.ClearToEmpty();
}
inline const std::string& GroupMessage::membername() const {
  // @@protoc_insertion_point(field_get:fixbug.GroupMessage.membername)
  return _internal_membername();
}
inline void GroupMessage::set_membername(const std::string& value) {
  _internal_set_membername(value);
  // @@protoc_insertion_point(field_set:fixbug.GroupMessage.membername)
}
inline std::string* GroupMessage::mutable_membername() {
  // @@protoc_insertion_point(field_mutable:fixbug.GroupMessage.membername)
  return _internal_mutable_membername();
}
inline const std::string& GroupMessage::_internal_membername() const {
  return membername_.Get();
}
inline void GroupMessage::_internal_set_membername(const std::string& value) {
  
  membername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GroupMessage::set_membername(std::string&& value) {
  
  membername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbug.GroupMessage.membername)
}
inline void GroupMessage::set_membername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  membername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:fixbug.GroupMessage.membername)
}
inline void GroupMessage::set_membername(const void* value,
    size_t size) {
  
  membername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbug.GroupMessage.membername)
}
inline std::string* GroupMessage::_internal_mutable_membername() {
  
  return membername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GroupMessage::release_membername() {
  // @@protoc_insertion_point(field_release:fixbug.GroupMessage.membername)
  return membername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessage::set_allocated_membername(std::string* membername) {
  if (membername != nullptr) {
    
  } else {
    
  }
  membername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), membername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbug.GroupMessage.membername)
}

// bytes msg = 6;
inline void GroupMessage::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& GroupMessage::msg() const {
  // @@protoc_insertion_point(field_get:fixbug.GroupMessage.msg)
  return _internal_msg();
}
inline void GroupMessage::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:fixbug.GroupMessage.msg)
}
inline std::string* GroupMessage::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:fixbug.GroupMessage.msg)
  return _internal_mutable_msg();
}
inline const std::string& GroupMessage::_internal_msg() const {
  return msg_.Get();
}
inline void GroupMessage::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GroupMessage::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fixbug.GroupMessage.msg)
}
inline void GroupMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:fixbug.GroupMessage.msg)
}
inline void GroupMessage::set_msg(const void* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fixbug.GroupMessage.msg)
}
inline std::string* GroupMessage::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GroupMessage::release_msg() {
  // @@protoc_insertion_point(field_release:fixbug.GroupMessage.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupMessage::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fixbug.GroupMessage.msg)
}

// int64 send_time = 7;
inline void GroupMessage::clear_send_time() {
  send_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessage::_internal_send_time() const {
  return send_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupMessage::send_time() const {
  // @@protoc_insertion_point(field_get:fixbug.GroupMessage.send_time)
  return _internal_send_time();
}
inline void GroupMessage::_internal_set_send_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  send_time_ = value;
}
inline void GroupMessage::set_send_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_send_time(value);
  // @@protoc_insertion_point(field_set:fixbug.GroupMessage.send_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbug

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chatservice_2eproto
